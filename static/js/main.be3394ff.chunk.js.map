{"version":3,"sources":["Images/background-todo.jpg","Components/ToDoListItem.js","Components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToDoListItem","item","onDelete","onComplete","className","completed","onClick","id","name","ToDoList","listToDo","filter","filterItem","map","key","App","useState","list","setList","nameInput","formState","setFormState","idCount","setIdCount","handleChange","event","target","value","state","style","backgroundImage","backgroundImg","type","placeholder","onChange","preventDefault","trim","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,6C,+KCY5BC,G,MAVM,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAEnC,OACI,wBAAIC,UAAWH,EAAKI,UAAY,gBAAkB,mBAAoBC,QAAS,kBAAMH,EAAWF,EAAKM,MACjG,4BAAKN,EAAKO,MACV,4BAAQD,GAAG,eAAeD,QAAS,kBAAMJ,EAASD,EAAKM,MAAvD,QCiBGE,EArBE,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SAAUR,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,WAAYQ,EAAY,EAAZA,OAE/C,OACI,4BACKD,EACIC,OAAQ,SAAAC,GAAU,MAAa,YAATD,IAAmD,IAAvBC,EAAWP,YAC7DQ,IAAI,SAACZ,GACF,OACI,kBAAC,EAAD,CACIa,IAAKb,EAAKM,GACVN,KAAMA,EACNC,SAAUA,EACVC,WAAYA,Q,mkBCTxC,IAqEeY,EArEH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEkBF,mBAAS,CAACG,UAAW,GAAIR,OAAQ,YAFnD,mBAETS,EAFS,KAEEC,EAFF,OAGcL,mBAAS,GAHvB,mBAGTM,EAHS,KAGAC,EAHA,KAOVC,EAAe,SAACC,GAAW,IAAD,EACRA,EAAMC,OAArBC,EADuB,EACvBA,MAAOnB,EADgB,EAChBA,KACda,EAAa,SAAAO,GAAU,OAAO,EAAP,GAAWA,EAAX,eAAmBpB,EAAOmB,OAoBnD,OACE,yBAAKvB,UAAU,OAEb,yBAAKG,GAAG,aACN,0CACA,yBAAKA,GAAG,gBAAgBsB,MAAO,CAACC,gBAAgB,OAAD,OAASC,IAAT,SAGjD,0BAAMxB,GAAG,WACP,2BACEH,UAAU,cACVI,KAAK,YACLwB,KAAK,OACLC,YAAY,aACZN,MAAOP,EAAUD,UACjBe,SAAUV,IAEZ,4BAAQpB,UAAU,cAAcE,QAlCtB,SAACmB,GACfA,EAAMU,iBAC4B,KAA/Bf,EAAUD,UAAUiB,SACrBlB,EAAQ,SAAAU,GAAK,4BAAQA,GAAR,CAAc,CAACrB,GAAIe,EAAQ,EAAGd,KAAMY,EAAUD,UAAWd,WAAW,OACjFgB,EAAa,SAAAO,GAAU,OAAO,EAAP,GAAWA,EAAX,CAAkBT,UAAW,OACpDI,EAAWD,EAAU,MA6BnB,aAIF,yBAAKf,GAAG,iBACN,kBAAC,EAAD,CAAUG,SAAUO,EAAMf,SA9Bf,SAACK,GAChBW,EAAQ,SAAAU,GAAK,OAAIA,EAAMjB,OAAO,SAACV,GAAD,OAAUA,EAAKM,KAAKA,OA6BAJ,WA1BjC,SAACI,GAClBW,EAAQ,SAAAU,GAAK,OAAIA,EAAMf,IAAI,SAAAZ,GAAI,OAAIA,EAAKM,KAAKA,EAAV,KAAmBN,EAAnB,CAAyBI,WAAYJ,EAAKI,YAAaJ,OAyBhBU,OAAQS,EAAUT,UAG1F,8BACE,yBAAKJ,GAAG,gBACN,2BAAOH,UAAU,eAAjB,WACE,2BAAOG,GAAG,eAAeyB,KAAK,QAAQxB,KAAK,SAASmB,MAAM,UAAUU,QAA4B,YAAnBjB,EAAUT,OAAoBuB,SAAUV,KAGvH,2BAAOpB,UAAU,eAAjB,iBACE,2BAAOG,GAAG,mBAAmByB,KAAK,QAAQxB,KAAK,SAASmB,MAAM,kBAAkBU,QAA4B,oBAAnBjB,EAAUT,OAA4BuB,SAAUV,SCvDjIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.be3394ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background-todo.a13b05ac.jpg\";","import React from 'react'\r\n\r\nconst ToDoListItem = ({item, onDelete, onComplete}) => {\r\n    \r\n    return (\r\n        <li className={item.completed ? 'completedItem' : 'notCompletedItem'} onClick={() => onComplete(item.id)}>\r\n            <h3>{item.name}</h3>\r\n            <button id='deleteButton' onClick={() => onDelete(item.id)}>X</button>  \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ToDoListItem","import React from 'react'\r\nimport ToDoListItem from '../Components/ToDoListItem'\r\n\r\nconst ToDoList = ({listToDo, onDelete, onComplete, filter}) => {\r\n\r\n    return (\r\n        <ul>\r\n            {listToDo\r\n                .filter((filterItem => filter==='showAll' ? true : filterItem.completed===false ))\r\n                .map((item) => {\r\n                    return ( \r\n                        <ToDoListItem \r\n                            key={item.id} \r\n                            item={item} \r\n                            onDelete={onDelete}\r\n                            onComplete={onComplete}>\r\n                        </ToDoListItem>\r\n                    )\r\n                })}\r\n        </ul>\r\n       \r\n    )\r\n}\r\n\r\nexport default ToDoList","import React from 'react';\nimport { useState } from 'react'\nimport './App.css';\nimport ToDoList from './Components/ToDoList'\nimport backgroundImg from './Images/background-todo.jpg'\n\nconst App = () => {\n  const [list, setList] = useState([])\n  const [formState, setFormState] = useState({nameInput: '', filter: 'showAll'})\n  const [idCount, setIdCount] = useState(1)\n\n  \n\n  const handleChange = (event) => {\n    const {value, name} = event.target\n    setFormState(state => {return {...state, [name]: value}})\n  }\n\n  const onClick = (event) => {\n    event.preventDefault()\n    if(formState.nameInput.trim() !== '') {\n      setList(state => [...state,{id: idCount+1, name: formState.nameInput, completed: false}])\n      setFormState(state => {return {...state, nameInput: ''}})\n      setIdCount(idCount + 1)\n    }\n  }\n\n  const onDelete = (id) => {\n    setList(state => state.filter((item) => item.id!==id))\n  }\n\n  const onComplete = (id) => {\n    setList(state => state.map(item => item.id===id ? {...item, completed: !item.completed} : item))\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div id='titleHero'>\n        <h1>To Do List</h1>\n        <div id='backgroundImg' style={{backgroundImage: `url(${backgroundImg})`}}></div>\n      </div>\n\n      <form id='topForm'>\n        <input\n          className='formControl'\n          name='nameInput' \n          type='text' \n          placeholder='enter name' \n          value={formState.nameInput} \n          onChange={handleChange}>\n        </input>\n        <button className='formControl' onClick={onClick}>Add Item</button>\n      </form>\n      \n\n      <div id='listContainer'>\n        <ToDoList listToDo={list} onDelete={onDelete} onComplete={onComplete} filter={formState.filter}/> \n      </div>\n      \n      <form>\n        <div id='radioButtons'>\n          <label className='formControl'>Show All\n            <input id='radioShowAll' type='radio' name='filter' value='showAll' checked={formState.filter==='showAll'} onChange={handleChange}/>\n          </label>\n\n          <label className='formControl'>Hide Completed\n            <input id='radioNotComplete' type='radio' name='filter' value='showNotComplete' checked={formState.filter==='showNotComplete'} onChange={handleChange} />\n          </label>\n        </div>\n      </form>     \n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}